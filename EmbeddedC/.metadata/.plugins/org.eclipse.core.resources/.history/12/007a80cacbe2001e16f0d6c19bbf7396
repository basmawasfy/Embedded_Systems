/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "platform_types.h"

//register address
#define RCC_BASE    0x40021000
#define PORTA_BASE  0x40010800
#define RCC_APB2ENR *(vuint32_t *)(RCC_BASE + 0x18)
#define GPIOA_CRH   *(vuint32_t *)(PORTA_BASE + 0x04)
#define GPIOA_ODR   *(vuint32_t *)(PORTA_BASE + 0x0c)

typedef union
{
	vuint32_t reg;

	struct
	{
	vuint32_t reserved :13;
	vuint32_t pin13 :1;
	}pin;

}UR_ODR_t;

volatile UR_ODR_t * p2ODR = (volatile UR_ODR_t )(PORTA_BASE + 0x0c);
int main(void)
{
	//register configuration
	//put 1 inside bit2 to enable clock to GPIO
	RCC_APB2ENR |= 1<<2;
	//to make mode output for pin13:
	//put 0 from bit20 to bit24 to make mode output
	GPIOA_CRH &= 0xff0fffff;
	//put pin13 =1
	GPIOA_CRH |= 0x00200000;

	while(1)
	{
		//GPIOA_ODR |= 1<<13;
		p2ODR->pin.pin13=0;
		for(int i=0; i<5000; i++);
		//GPIOA_ODR &= ~( 1<<13);
		p2ODR->pin.pin13=1;
		for(int i=0; i<5000; i++);

	}
}
